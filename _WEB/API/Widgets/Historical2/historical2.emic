//RFI TAG:driverName=HTML Widget


#setFile plugins/www/header.html
<script type="module" src="/dashboard/.{userName}./.{project}./.{userModule}./JS/historical2.js"> </script>
#unSetFile

#setFile temp/header.html
<script type="module" src="./JS/historical2.js"> </script>
#unSetFile

#setFile wwwroot/JS/historical2.js
#newRFIcode(_WEB/API/Widgets/Historical2/plugins/historical2.js,name=)
#unSetFile

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                                 Componente
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*RFI JSon
{
	'Nombre': 'historical2',
	'NombreToolBox': 'historical2',
	'Tipo' : 'Widget',
	'title': 'Control deslizante',
	'html-tag': 'emic-widget-historical2',
}
*/
//	'instance': '{"component":"emic-widget-historical2","attributes":{}}',

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                                 Evento
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*RFI JSon
{
	'Nombre': 'historical2Change',
	'NombreToolBox': 'historical2Change',
	'Tipo' : 'SistemEvt',
	'title': 'when press mouse over button',
	'instancia':'{
		"NombreWorkBox": "Event.historical2.change",
		"definir":"event_mousedown_active",
		"parametros": [{"json":"Historical2","title":"Historical2 name "},{"json":"Value","title":"Historical2 json "}]
		}'
}
*/

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                                 Funciones
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/**
 * @fn void SetDataHist2(int HistName,int Value)
 * @alias SetDataHist2
 * @brief Set text
 * @param HistName HistName
 * @param Value Value
 * @return Nothing
 */ 
 
function SetDataHist2(HistName, Hjson) {
    // Normaliza el nombre del indicador eliminando cualquier parte antes de la última barra diagonal '/'.
    var gName = HistName.includes("/")
        ? HistName.substr(HistName.lastIndexOf("/") + 1)
        : HistName;
    var historical2 = document.getElementById(gName);

    if (!historical2) {
        historical2 = document.getElementById("H-" + gName);
    }

    // Verificar si el elemento existe y es del tipo correcto
    if (
        historical2 &&
        historical2.tagName.toLowerCase() === "emic-widget-historical2"
    ) {
        // Intentar parsear el JSON
        let obj;
        try {
            obj = JSON.parse(Hjson);
        } catch (e) {
            console.error("El argumento Hjson proporcionado no es un JSON válido.");
            return; // Termina la función si Hjson no es un JSON válido
        }

        // Verificar que obj tiene las propiedades esperadas
        if (
            !obj.hasOwnProperty("label") ||
            !obj.hasOwnProperty("dataLabels") ||
            !obj.hasOwnProperty("dataValues")
        ) {
            console.error(
                "El objeto JSON no tiene las propiedades requeridas: label, dataLabels, dataValues"
            );
            return;
        }
        const { label, dataLabels, dataValues } = obj;

        if (Array.isArray(label)) {
            historical2.setAttribute("label", JSON.stringify(label));
        } else {
            console.error("label debe ser un array");
        }

        if (Array.isArray(dataLabels)) {
            historical2.setAttribute("data-labels", JSON.stringify(dataLabels));
        } else {
            console.error("dataLabels debe ser un array");
        }

        if (Array.isArray(dataValues)) {
            historical2.setAttribute("data-values", JSON.stringify(dataValues));
        } else {
            console.error("dataValues debe ser un array");
        }
    } 
}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @fn void MultiSetDataHist2(int compTopic, int topic, int payload, int WidgetName)
 * @alias MultiSetDataHist2
 * @brief Set text
 * @param compTopic compTopic
 * @param topic topic
 * @param payload payload
 * @param WidgetName WidgetName
 * @return Nothing
 */ 
 
function MultiSetDataHist2(compTopic, topic, payload, WidgetName) {
    // Normaliza el nombre del indicador eliminando cualquier parte antes de la última barra diagonal '/'.
    if (compTopic === topic) {
        var historical2 = document.getElementById(WidgetName);

        if (!historical2) {
            historical2 = document.getElementById("H-" + WidgetName);
        }

        // Verificar si el elemento existe y es del tipo correcto
        if (
            historical2 &&
            historical2.tagName.toLowerCase() === "emic-widget-historical2"
        ) {
            // Intentar parsear el JSON
            let obj;
            try {
                obj = JSON.parse(payload);
            } catch (e) {
                console.error("El argumento Hjson proporcionado no es un JSON válido.");
                return; // Termina la función si Hjson no es un JSON válido
            }

            // Verificar que obj tiene las propiedades esperadas
            if (
                !obj.hasOwnProperty("label") ||
                !obj.hasOwnProperty("dataLabels") ||
                !obj.hasOwnProperty("dataValues")
            ) {
                console.error(
                    "El objeto JSON no tiene las propiedades requeridas: label, dataLabels, dataValues"
                );
                return;
            }
            const { label, dataLabels, dataValues } = obj;

            if (Array.isArray(label)) {
                historical2.setAttribute("label", JSON.stringify(label));
            } else {
                console.error("label debe ser un array");
            }

            if (Array.isArray(dataLabels)) {
                historical2.setAttribute("data-labels", JSON.stringify(dataLabels));
            } else {
                console.error("dataLabels debe ser un array");
            }

            if (Array.isArray(dataValues)) {
                historical2.setAttribute("data-values", JSON.stringify(dataValues));
            } else {
                console.error("dataValues debe ser un array");
            }
        }
    }
}
